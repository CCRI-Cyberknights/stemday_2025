{
  "01_Stego": {
    "last_password": "liber8"
  },
  "02_Base64": {
    "real_flag": "CCRI-YLHO-3207",
    "challenge_file": "challenges_solo/02_Base64/encoded.txt",
    "unlock_method": "Base64 decode",
    "hint": "Decode encoded.txt using base64 -d or an online tool."
  },
  "03_ROT13": {
    "real_flag": "CCRI-WJML-7715",
    "challenge_file": "challenges_solo/03_ROT13/cipher.txt",
    "unlock_method": "ROT13 decode",
    "hint": "Apply ROT13 to cipher.txt to recover plaintext."
  },
  "04_Vigenere": {
    "real_flag": "CCRI-SODC-7978",
    "vigenere_key": "providence",
    "challenge_file": "challenges_solo/04_Vigenere/cipher.txt",
    "unlock_method": "Vigen\u00e8re cipher (key='providence')",
    "hint": "Use the Vigen\u00e8re key 'providence' to decrypt cipher.txt."
  },
  "05_ArchivePassword": {
    "real_flag": "CCRI-OGNC-7390",
    "last_zip_password": "testing",
    "challenge_file": "challenges_solo/05_Archive_Password/secret.zip",
    "wordlist_file": "challenges_solo/05_Archive_Password/wordlist.txt",
    "unlock_method": "Brute-force ZIP password using provided wordlist",
    "hint": "Use wordlist.txt with zip2john + hashcat or fcrackzip."
  },
  "06_Hashcat": {
    "real_flag": "CCRI-JPWU-2992",
    "reconstructed_flag": "CCRI-JPWU-2992",
    "challenge_files": {
      "hashes": "challenges_solo/06_Hashcat/hashes.txt",
      "wordlist": "challenges_solo/06_Hashcat/wordlist.txt",
      "segments_dir": "challenges_solo/06_Hashcat/segments"
    },
    "hash_password_zip_map": {
      "dd945ab221b14e3be0d31fd4026f27eb": {
        "password": "secret!",
        "zip_file": "challenges_solo/06_Hashcat/segments/part1.zip"
      },
      "c21f969b5f03d33d43e04f8f136e7682": {
        "password": "default",
        "zip_file": "challenges_solo/06_Hashcat/segments/part2.zip"
      },
      "c380968581f353d083a1309317229731": {
        "password": "Winter2014",
        "zip_file": "challenges_solo/06_Hashcat/segments/part3.zip"
      }
    },
    "unlock_method": "Recover MD5 hashes with Hashcat and unzip protected parts",
    "hint": "Use hashes.txt + wordlist.txt with Hashcat to crack passwords and extract ZIPs."
  },
  "07_ExtractBinary": {
    "real_flag": "CCRI-EWFX-3275",
    "challenge_file": "challenges_solo/07_Extract_from_Binary/hidden_flag",
    "unlock_method": "Analyze binary with strings or disassembler to find flags",
    "hint": "Try using 'strings hidden_flag' or load it in radare2."
  },
  "08_FakeAuthLog": {
    "real_flag": "CCRI-MRBB-5897",
    "reconstructed_flag": "CCRI-MRBB-5897",
    "challenge_file": "challenges_solo/08_Fake_Auth_Log/auth.log",
    "unlock_method": "Inspect auth.log for embedded flag in sshd PIDs",
    "hint": "Look for unusual process IDs in auth.log to spot the flag."
  },
  "09_FixScript": {
    "real_flag": "CCRI-SCRP-9801",
    "correct_operator": "*",
    "challenge_file": "challenges_solo/09_Fix_the_Script/broken_flag.py",
    "unlock_method": "Fix the Python script\u2019s math operator to calculate the flag",
    "hint": "Find the broken operator in broken_flag.py and replace it with '*'."
  },
  "10_Metadata": {
    "real_flag": "CCRI-META-DRHH-6023",
    "challenge_file": "challenges_solo/10_Metadata/capybara.jpg",
    "unlock_method": "Inspect EXIF metadata of capybara.jpg to find the flag",
    "hint": "Use exiftool or exifread to view metadata tags."
  },
  "11_HiddenFlag": {
    "real_flag": "CCRI-GHJC-2142",
    "challenge_folder": "challenges_solo/11_Hidden_Flag/junk",
    "unlock_method": "Search recursively for the flag in hidden files",
    "hint": "Use grep -R or find/strings to locate the flag in junk/"
  },
  "12_QRCodes": {
    "real_flag": "CCRI-SWOS-4102",
    "challenge_folder": "challenges_solo/12_QR_Codes",
    "unlock_method": "Scan QR codes to reveal flags and find the real one",
    "hint": "Use a QR scanner app or zbarimg to read qr_*.png"
  },
  "13_HTTPHeaders": {
    "real_flag": "CCRI-RCBB-6935",
    "challenge_file": "challenges_solo/13_HTTP_Headers/response_4.txt",
    "unlock_method": "Inspect HTTP headers in response_*.txt to locate the X-Flag header with the real flag",
    "hint": "Look for custom HTTP headers like X-Flag in the responses"
  },
  "14_SubdomainSweep": {
    "real_flag": "CCRI-NWQW-8476",
    "challenge_folder": "challenges_solo/14_Subdomain_Sweep",
    "unlock_method": "Inspect HTML files for subdomains to locate the flag",
    "hint": "Search *.liber8.local.html for the flag string using grep or a browser"
  },
  "15_ProcessInspection": {
    "real_flag": "CCRI-SPMO-5762",
    "challenge_file": "challenges_solo/15_Process_Inspection/ps_dump.txt",
    "unlock_method": "Inspect ps_dump.txt for flags embedded in process commands",
    "hint": "Use grep to search for flags in ps_dump.txt"
  },
  "16_Hex_Hunting": {
    "real_flag": "CCRI-ZWHV-7860",
    "challenge_file": "challenges_solo/16_Hex_Hunting/hex_flag.bin",
    "unlock_method": "Inspect hex_flag.bin with a hex editor or strings command to locate the flag",
    "hint": "Try running 'strings hex_flag.bin' or open it in a hex editor like bless or GHex."
  },
  "17_Nmap_Scanning": {
    "real_flag": "CCRI-CKCN-7164",
    "real_port": 9038,
    "server_file": "web_version_admin/server.py",
    "unlock_method": "Scan ports 9000\u20139099 and query HTTP endpoints to locate the real flag (port 9038)",
    "hint": "Use nmap -p9000-9099 localhost to discover ports and curl to check flags."
  },
  "18_Pcap_Search": {
    "real_flag": "CCRI-PWRX-4503",
    "challenge_file": "challenges_solo/18_Pcap_Search/traffic.pcap",
    "unlock_method": "Analyze traffic.pcap for flags in HTTP headers using Wireshark or tshark",
    "hint": "Filter for HTTP headers (e.g., `http.header`) or grep for `X-Flag:`"
  }
}